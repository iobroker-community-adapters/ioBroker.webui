import { BaseServiceContainer } from './BaseServiceContainer.js';
import { DemoView } from '../widgets/demoView/demoView.js';
import { GlobalContext } from './GlobalContext.js';
import { CodeViewSimple } from '../widgets/codeView/code-view-simple.js';
const isMobile = !!(navigator.maxTouchPoints && navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome'));
export class ServiceContainer extends BaseServiceContainer {
    config = {
        codeViewWidget: CodeViewSimple,
        demoViewWidget: DemoView
    };
    designerExtensions = new Map();
    removeDesignerExtensionOfType(container, lambda) {
        const extContainer = this.designerExtensions.get(container);
        for (let i = 0; i < extContainer.length; i++) {
            if (extContainer[i].constructor === lambda) {
                extContainer.splice(i, 1);
            }
        }
    }
    instanceServiceContainerCreatedCallbacks = [];
    designViewConfigButtons = [];
    designViewToolbarButtons = [];
    designerPointerExtensions = [];
    designerContextMenuExtensions;
    overlayLayerViewAdditionalStyles = [];
    globalContext = new GlobalContext(this);
    options = {
        zoomDesignerBackground: true,
        roundPixelsToDecimalPlaces: 0,
        resizerPixelSize: isMobile ? 8 : 3
    };
    designerTools = new Map();
    get bindingService() {
        return this.getLastService('bindingService');
    }
    get bindableObjectsServices() {
        return this.getServices('bindableObjectsService');
    }
    get bindableObjectDragDropService() {
        return this.getLastService('bindableObjectDragDropService');
    }
    get propertyGridDragDropService() {
        return this.getLastService('propertyGridDragDropService');
    }
    get dragDropService() {
        return this.getLastService('dragDropService');
    }
    get elementInteractionServices() {
        return this.getServices('elementInteractionService');
    }
    get propertiesServices() {
        return this.getServices('propertyService');
    }
    get attachedPropertyServices() {
        return this.getServices('attachedPropertyService');
    }
    get propertyGroupService() {
        return this.getLastService('propertyGroupsService');
    }
    get containerServices() {
        return this.getServices('containerService');
    }
    get snaplinesProviderService() {
        return this.getLastService('snaplinesProviderService');
    }
    get elementsServices() {
        return this.getServices('elementsService');
    }
    get eventsService() {
        return this.getServices('eventsService');
    }
    get instanceServices() {
        return this.getServices('instanceService');
    }
    get editorTypesServices() {
        return this.getServices('editorTypesService');
    }
    get htmlWriterService() {
        return this.getLastService('htmlWriterService');
    }
    get htmlParserService() {
        return this.getLastService('htmlParserService');
    }
    get intializationService() {
        return this.getLastService('intializationService');
    }
    get elementAtPointService() {
        return this.getLastService('elementAtPointService');
    }
    get externalDragDropService() {
        return this.getLastService('externalDragDropService');
    }
    get copyPasteService() {
        return this.getLastService('copyPasteService');
    }
    get modelCommandService() {
        return this.getLastService('modelCommandService');
    }
    get demoProviderService() {
        return this.getLastService('demoProviderService');
    }
    get designItemService() {
        return this.getLastService('designItemService');
    }
    get configUiServices() {
        return this.getServices('configUiService');
    }
    get refactorServices() {
        return this.getServices('refactorService');
    }
    get deletionService() {
        return this.getLastService('deletionService');
    }
}
//# sourceMappingURL=ServiceContainer.js.map