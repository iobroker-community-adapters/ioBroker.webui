import { PropertiesHelper } from './PropertiesHelper.js';
import { AbstractPropertiesService } from './AbstractPropertiesService.js';
import { PropertyType } from '../PropertyType.js';
import { RefreshMode } from '../IPropertiesService.js';
export class AbstractPolymerLikePropertiesService extends AbstractPropertiesService {
    getRefreshMode(designItem) {
        return RefreshMode.fullOnClassChange;
    }
    async getProperties(designItem) {
        if (!this.isHandledElement(designItem))
            return null;
        return this.parseProperties(designItem.element.constructor.properties);
    }
    parseProperties(list) {
        let properties = [];
        for (const name in list) {
            const polymerProperty = list[name];
            let type = polymerProperty;
            let description = null;
            let example = null;
            let readonly = false;
            if (polymerProperty.type) {
                type = polymerProperty.type;
                description = polymerProperty.description;
                example = polymerProperty.example;
                readonly = polymerProperty.readonly;
            }
            if (type === String) {
                let property = { name: name, type: "string", service: this, propertyType: PropertyType.propertyAndAttribute, description: description, example: example, readonly };
                properties.push(property);
            }
            else if (type === Object) {
                let property = { name: name, type: "object", service: this, propertyType: PropertyType.propertyAndAttribute, description: description, example: example, readonly };
                properties.push(property);
            }
            else if (type === Number) {
                let property = { name: name, type: "number", service: this, propertyType: PropertyType.propertyAndAttribute, description: description, example: example, readonly };
                properties.push(property);
            }
            else if (type === Date) {
                let property = { name: name, type: "date", service: this, propertyType: PropertyType.propertyAndAttribute, description: description, example: example, readonly };
                properties.push(property);
            }
            else if (type === Boolean) {
                let property = { name: name, type: "boolean", service: this, propertyType: PropertyType.propertyAndAttribute, description: description, example: example, readonly };
                properties.push(property);
            }
            else if (PropertiesHelper.isTypescriptEnum(type)) {
                let property = { name: name, type: "enum", enumValues: PropertiesHelper.getTypescriptEnumEntries(type), service: this, propertyType: PropertyType.propertyAndAttribute, description: description, example: example, readonly };
                properties.push(property);
            }
            else {
                let property = { name: name, type: "string", service: this, propertyType: PropertyType.propertyAndAttribute, description: description, example: example, readonly };
                properties.push(property);
            }
        }
        return properties;
    }
    getUnsetValue(designItems, property) {
        return designItems[0].element[property.propertyName ?? property.name];
    }
}
//# sourceMappingURL=AbstractPolymerLikePropertiesService.js.map